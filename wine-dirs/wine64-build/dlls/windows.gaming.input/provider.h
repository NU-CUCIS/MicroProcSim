/*** Autogenerated by WIDL 8.0-rc1 from ../wine-source/dlls/windows.gaming.input/provider.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __provider_h__
#define __provider_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler ABI::Windows::Gaming::Input::Custom::IWineAsyncOperationCompletedHandler
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineAsyncOperationCompletedHandler;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl ABI::Windows::Gaming::Input::Custom::IGameControllerImpl
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IGameControllerImpl;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider ABI::Windows::Gaming::Input::Custom::IWineGameControllerProvider
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineGameControllerProvider;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl ABI::Windows::Gaming::Input::Custom::IWineForceFeedbackEffectImpl
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineForceFeedbackEffectImpl;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl ABI::Windows::Gaming::Input::Custom::IWineAsyncInfoImpl
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineAsyncInfoImpl;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerProvider_FWD_DEFINED__
#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    class WineGameControllerProvider;
                }
            }
        }
    }
}
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerProvider;
#endif /* defined __cplusplus */
#endif /* defined ____x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerProvider_FWD_DEFINED__ */

/* Headers for imported files */

#include <propidl.h>
#include <inspectable.h>
#include <asyncinfo.h>
#include <eventtoken.h>
#include <windowscontracts.h>
#include <windows.foundation.h>
#include <windows.gaming.input.h>
#include <windows.gaming.input.custom.h>
#include <windows.gaming.input.forcefeedback.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __cplusplus
typedef enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType;
#endif /* __cplusplus */

#ifndef __cplusplus
typedef enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType;
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineGameControllerState WineGameControllerState;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineGameControllerVibration WineGameControllerVibration;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConditionEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConditionEffectParameters;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineConditionEffectParameters WineConditionEffectParameters;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConstantEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConstantEffectParameters;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineConstantEffectParameters WineConstantEffectParameters;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineRampEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineRampEffectParameters;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineRampEffectParameters WineRampEffectParameters;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWinePeriodicEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWinePeriodicEffectParameters;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WinePeriodicEffectParameters WinePeriodicEffectParameters;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef struct WineForceFeedbackEffectEnvelope WineForceFeedbackEffectEnvelope;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef __cplusplus
typedef union __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters;
#else /* __cplusplus */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    typedef union WineForceFeedbackEffectParameters WineForceFeedbackEffectParameters;
                }
            }
        }
    }
}
#endif /* __cplusplus */

#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider;
#ifdef __cplusplus
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider ABI::Windows::Gaming::Input::Custom::IWineGameControllerProvider
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineGameControllerProvider;
                }
            }
        }
    }
}
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * IWineAsyncOperationCompletedHandler interface
 */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_INTERFACE_DEFINED__

#if defined(__cplusplus) && !defined(CINTERFACE)
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    interface IWineAsyncOperationCompletedHandler : public IUnknown
                    {
                        virtual HRESULT STDMETHODCALLTYPE Invoke(
                            IInspectable *async,
                            AsyncStatus status) = 0;

                    };
                }
            }
        }
    }
}
extern "C" {
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandlerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *This);

    /*** IWineAsyncOperationCompletedHandler methods ***/
    HRESULT (STDMETHODCALLTYPE *Invoke)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *This,
        IInspectable *async,
        AsyncStatus status);

    END_INTERFACE
} __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandlerVtbl;

interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler {
    CONST_VTBL __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandlerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_AddRef(This) (This)->lpVtbl->AddRef(This)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Release(This) (This)->lpVtbl->Release(This)
/*** IWineAsyncOperationCompletedHandler methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Invoke(This,async,status) (This)->lpVtbl->Invoke(This,async,status)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_QueryInterface(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_AddRef(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Release(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineAsyncOperationCompletedHandler methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Invoke(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler* This,IInspectable *async,AsyncStatus status) {
    return This->lpVtbl->Invoke(This,async,status);
}
#endif
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define IWineAsyncOperationCompletedHandlerVtbl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandlerVtbl
#define IWineAsyncOperationCompletedHandler __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler
#define IWineAsyncOperationCompletedHandler_QueryInterface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_QueryInterface
#define IWineAsyncOperationCompletedHandler_AddRef __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_AddRef
#define IWineAsyncOperationCompletedHandler_Release __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Release
#define IWineAsyncOperationCompletedHandler_Invoke __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_Invoke
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#endif

#endif  /* ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler_INTERFACE_DEFINED__ */

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    enum WineGameControllerType {
                        WineGameControllerType_Joystick = 0,
                        WineGameControllerType_Gamepad = 1,
                        WineGameControllerType_RacingWheel = 2
                    };
                }
            }
        }
    }
}
extern "C" {
#else
enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType {
    WineGameControllerType_Joystick = 0,
    WineGameControllerType_Gamepad = 1,
    WineGameControllerType_RacingWheel = 2
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineGameControllerType __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    enum WineForceFeedbackEffectType {
                        WineForceFeedbackEffectType_Constant = 1,
                        WineForceFeedbackEffectType_Ramp = 2,
                        WineForceFeedbackEffectType_Periodic = 10,
                        WineForceFeedbackEffectType_Periodic_SquareWave = 10,
                        WineForceFeedbackEffectType_Periodic_SineWave = 11,
                        WineForceFeedbackEffectType_Periodic_TriangleWave = 12,
                        WineForceFeedbackEffectType_Periodic_SawtoothWaveUp = 13,
                        WineForceFeedbackEffectType_Periodic_SawtoothWaveDown = 14,
                        WineForceFeedbackEffectType_Condition = 20,
                        WineForceFeedbackEffectType_Condition_Spring = 20,
                        WineForceFeedbackEffectType_Condition_Damper = 21,
                        WineForceFeedbackEffectType_Condition_Inertia = 22,
                        WineForceFeedbackEffectType_Condition_Friction = 23
                    };
                }
            }
        }
    }
}
extern "C" {
#else
enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType {
    WineForceFeedbackEffectType_Constant = 1,
    WineForceFeedbackEffectType_Ramp = 2,
    WineForceFeedbackEffectType_Periodic = 10,
    WineForceFeedbackEffectType_Periodic_SquareWave = 10,
    WineForceFeedbackEffectType_Periodic_SineWave = 11,
    WineForceFeedbackEffectType_Periodic_TriangleWave = 12,
    WineForceFeedbackEffectType_Periodic_SawtoothWaveUp = 13,
    WineForceFeedbackEffectType_Periodic_SawtoothWaveDown = 14,
    WineForceFeedbackEffectType_Condition = 20,
    WineForceFeedbackEffectType_Condition_Spring = 20,
    WineForceFeedbackEffectType_Condition_Damper = 21,
    WineForceFeedbackEffectType_Condition_Inertia = 22,
    WineForceFeedbackEffectType_Condition_Friction = 23
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineForceFeedbackEffectType __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineGameControllerState {
                        UINT64 timestamp;
                        DOUBLE axes[32];
                        BOOLEAN buttons[128];
                        enum GameControllerSwitchPosition switches[4];
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState {
    UINT64 timestamp;
    DOUBLE axes[32];
    BOOLEAN buttons[128];
    enum __x_ABI_CWindows_CGaming_CInput_CGameControllerSwitchPosition switches[4];
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineGameControllerState __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineGameControllerVibration {
                        UINT16 rumble;
                        UINT16 buzz;
                        UINT16 left;
                        UINT16 right;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration {
    UINT16 rumble;
    UINT16 buzz;
    UINT16 left;
    UINT16 right;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineGameControllerVibration __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineConditionEffectParameters {
                        enum WineForceFeedbackEffectType type;
                        struct Vector3 direction;
                        FLOAT positive_coeff;
                        FLOAT negative_coeff;
                        FLOAT max_positive_magnitude;
                        FLOAT max_negative_magnitude;
                        FLOAT deadzone;
                        FLOAT bias;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConditionEffectParameters {
    enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType type;
    struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 direction;
    FLOAT positive_coeff;
    FLOAT negative_coeff;
    FLOAT max_positive_magnitude;
    FLOAT max_negative_magnitude;
    FLOAT deadzone;
    FLOAT bias;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineConditionEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConditionEffectParameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineConstantEffectParameters {
                        enum WineForceFeedbackEffectType type;
                        struct Vector3 direction;
                        struct TimeSpan duration;
                        struct TimeSpan start_delay;
                        UINT32 repeat_count;
                        FLOAT gain;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConstantEffectParameters {
    enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType type;
    struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 direction;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan duration;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan start_delay;
    UINT32 repeat_count;
    FLOAT gain;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineConstantEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConstantEffectParameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineRampEffectParameters {
                        enum WineForceFeedbackEffectType type;
                        struct Vector3 start_vector;
                        struct Vector3 end_vector;
                        struct TimeSpan duration;
                        struct TimeSpan start_delay;
                        UINT32 repeat_count;
                        FLOAT gain;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineRampEffectParameters {
    enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType type;
    struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 start_vector;
    struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 end_vector;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan duration;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan start_delay;
    UINT32 repeat_count;
    FLOAT gain;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineRampEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineRampEffectParameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WinePeriodicEffectParameters {
                        enum WineForceFeedbackEffectType type;
                        struct Vector3 direction;
                        struct TimeSpan duration;
                        struct TimeSpan start_delay;
                        UINT32 repeat_count;
                        FLOAT frequency;
                        FLOAT phase;
                        FLOAT bias;
                        FLOAT gain;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWinePeriodicEffectParameters {
    enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType type;
    struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 direction;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan duration;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan start_delay;
    UINT32 repeat_count;
    FLOAT frequency;
    FLOAT phase;
    FLOAT bias;
    FLOAT gain;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WinePeriodicEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWinePeriodicEffectParameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    struct WineForceFeedbackEffectEnvelope {
                        FLOAT attack_gain;
                        FLOAT release_gain;
                        struct TimeSpan attack_duration;
                        struct TimeSpan release_duration;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope {
    FLOAT attack_gain;
    FLOAT release_gain;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan attack_duration;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan release_duration;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineForceFeedbackEffectEnvelope __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#ifdef __cplusplus
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    union WineForceFeedbackEffectParameters {
                        enum WineForceFeedbackEffectType type;
                        struct WineConditionEffectParameters condition;
                        struct WineConstantEffectParameters constant;
                        struct WineRampEffectParameters ramp;
                        struct WinePeriodicEffectParameters periodic;
                    };
                }
            }
        }
    }
}
extern "C" {
#else
union __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters {
    enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectType type;
    struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConditionEffectParameters condition;
    struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineConstantEffectParameters constant;
    struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineRampEffectParameters ramp;
    struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWinePeriodicEffectParameters periodic;
};
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define WineForceFeedbackEffectParameters __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

/*****************************************************************************
 * IGameControllerImpl interface
 */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_INTERFACE_DEFINED__

DEFINE_GUID(IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl, 0x06e58977, 0x7684, 0x4dc5, 0xba,0xd1, 0xcd,0xa5,0x2a,0x4a,0xa0,0x6d);
#if defined(__cplusplus) && !defined(CINTERFACE)
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    MIDL_INTERFACE("06e58977-7684-4dc5-bad1-cda52a4aa06d")
                    IGameControllerImpl : public IInspectable
                    {
                        virtual HRESULT STDMETHODCALLTYPE Initialize(
                            ABI::Windows::Gaming::Input::IGameController *outer,
                            ABI::Windows::Gaming::Input::Custom::IGameControllerProvider *provider) = 0;

                    };
                }
            }
        }
    }
}
extern "C" {
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl, 0x06e58977, 0x7684, 0x4dc5, 0xba,0xd1, 0xcd,0xa5,0x2a,0x4a,0xa0,0x6d)
#endif
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImplVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This);

    /*** IInspectable methods ***/
    HRESULT (STDMETHODCALLTYPE *GetIids)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This,
        ULONG *iidCount,
        IID **iids);

    HRESULT (STDMETHODCALLTYPE *GetRuntimeClassName)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This,
        HSTRING *className);

    HRESULT (STDMETHODCALLTYPE *GetTrustLevel)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This,
        TrustLevel *trustLevel);

    /*** IGameControllerImpl methods ***/
    HRESULT (STDMETHODCALLTYPE *Initialize)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl *This,
        __x_ABI_CWindows_CGaming_CInput_CIGameController *outer,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider *provider);

    END_INTERFACE
} __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImplVtbl;

interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl {
    CONST_VTBL __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImplVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Release(This) (This)->lpVtbl->Release(This)
/*** IInspectable methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetIids(This,iidCount,iids) (This)->lpVtbl->GetIids(This,iidCount,iids)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetRuntimeClassName(This,className) (This)->lpVtbl->GetRuntimeClassName(This,className)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetTrustLevel(This,trustLevel) (This)->lpVtbl->GetTrustLevel(This,trustLevel)
/*** IGameControllerImpl methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Initialize(This,outer,provider) (This)->lpVtbl->Initialize(This,outer,provider)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_QueryInterface(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_AddRef(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Release(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This) {
    return This->lpVtbl->Release(This);
}
/*** IInspectable methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetIids(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This,ULONG *iidCount,IID **iids) {
    return This->lpVtbl->GetIids(This,iidCount,iids);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetRuntimeClassName(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This,HSTRING *className) {
    return This->lpVtbl->GetRuntimeClassName(This,className);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetTrustLevel(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This,TrustLevel *trustLevel) {
    return This->lpVtbl->GetTrustLevel(This,trustLevel);
}
/*** IGameControllerImpl methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Initialize(__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl* This,__x_ABI_CWindows_CGaming_CInput_CIGameController *outer,__x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider *provider) {
    return This->lpVtbl->Initialize(This,outer,provider);
}
#endif
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define IID_IGameControllerImpl IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl
#define IGameControllerImplVtbl __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImplVtbl
#define IGameControllerImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl
#define IGameControllerImpl_QueryInterface __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_QueryInterface
#define IGameControllerImpl_AddRef __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_AddRef
#define IGameControllerImpl_Release __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Release
#define IGameControllerImpl_GetIids __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetIids
#define IGameControllerImpl_GetRuntimeClassName __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetRuntimeClassName
#define IGameControllerImpl_GetTrustLevel __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_GetTrustLevel
#define IGameControllerImpl_Initialize __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_Initialize
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#endif

#endif  /* ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerImpl_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineGameControllerProvider interface
 */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_INTERFACE_DEFINED__

DEFINE_GUID(IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider, 0x8967b6ef, 0xa4de, 0x4b9a, 0x98,0x4a, 0x9f,0x92,0x0b,0x4d,0x1b,0x26);
#if defined(__cplusplus) && !defined(CINTERFACE)
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    MIDL_INTERFACE("8967b6ef-a4de-4b9a-984a-9f920b4d1b26")
                    IWineGameControllerProvider : public IInspectable
                    {
                        virtual HRESULT STDMETHODCALLTYPE get_Type(
                            enum WineGameControllerType *value) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_AxisCount(
                            INT32 *value) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_ButtonCount(
                            INT32 *value) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_SwitchCount(
                            INT32 *value) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_State(
                            struct WineGameControllerState *state) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_Vibration(
                            struct WineGameControllerVibration *vibration) = 0;

                        virtual HRESULT STDMETHODCALLTYPE put_Vibration(
                            struct WineGameControllerVibration vibration) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_ForceFeedbackMotor(
                            ABI::Windows::Gaming::Input::ForceFeedback::IForceFeedbackMotor **motor) = 0;

                    };
                }
            }
        }
    }
}
extern "C" {
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider, 0x8967b6ef, 0xa4de, 0x4b9a, 0x98,0x4a, 0x9f,0x92,0x0b,0x4d,0x1b,0x26)
#endif
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProviderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This);

    /*** IInspectable methods ***/
    HRESULT (STDMETHODCALLTYPE *GetIids)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        ULONG *iidCount,
        IID **iids);

    HRESULT (STDMETHODCALLTYPE *GetRuntimeClassName)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        HSTRING *className);

    HRESULT (STDMETHODCALLTYPE *GetTrustLevel)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        TrustLevel *trustLevel);

    /*** IWineGameControllerProvider methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Type)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType *value);

    HRESULT (STDMETHODCALLTYPE *get_AxisCount)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        INT32 *value);

    HRESULT (STDMETHODCALLTYPE *get_ButtonCount)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        INT32 *value);

    HRESULT (STDMETHODCALLTYPE *get_SwitchCount)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        INT32 *value);

    HRESULT (STDMETHODCALLTYPE *get_State)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState *state);

    HRESULT (STDMETHODCALLTYPE *get_Vibration)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration *vibration);

    HRESULT (STDMETHODCALLTYPE *put_Vibration)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration vibration);

    HRESULT (STDMETHODCALLTYPE *get_ForceFeedbackMotor)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider *This,
        __x_ABI_CWindows_CGaming_CInput_CForceFeedback_CIForceFeedbackMotor **motor);

    END_INTERFACE
} __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProviderVtbl;

interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider {
    CONST_VTBL __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProviderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_AddRef(This) (This)->lpVtbl->AddRef(This)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_Release(This) (This)->lpVtbl->Release(This)
/*** IInspectable methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetIids(This,iidCount,iids) (This)->lpVtbl->GetIids(This,iidCount,iids)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetRuntimeClassName(This,className) (This)->lpVtbl->GetRuntimeClassName(This,className)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetTrustLevel(This,trustLevel) (This)->lpVtbl->GetTrustLevel(This,trustLevel)
/*** IWineGameControllerProvider methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Type(This,value) (This)->lpVtbl->get_Type(This,value)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_AxisCount(This,value) (This)->lpVtbl->get_AxisCount(This,value)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ButtonCount(This,value) (This)->lpVtbl->get_ButtonCount(This,value)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_SwitchCount(This,value) (This)->lpVtbl->get_SwitchCount(This,value)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_State(This,state) (This)->lpVtbl->get_State(This,state)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Vibration(This,vibration) (This)->lpVtbl->get_Vibration(This,vibration)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_put_Vibration(This,vibration) (This)->lpVtbl->put_Vibration(This,vibration)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ForceFeedbackMotor(This,motor) (This)->lpVtbl->get_ForceFeedbackMotor(This,motor)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_QueryInterface(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_AddRef(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_Release(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This) {
    return This->lpVtbl->Release(This);
}
/*** IInspectable methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetIids(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,ULONG *iidCount,IID **iids) {
    return This->lpVtbl->GetIids(This,iidCount,iids);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetRuntimeClassName(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,HSTRING *className) {
    return This->lpVtbl->GetRuntimeClassName(This,className);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetTrustLevel(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,TrustLevel *trustLevel) {
    return This->lpVtbl->GetTrustLevel(This,trustLevel);
}
/*** IWineGameControllerProvider methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Type(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,enum __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerType *value) {
    return This->lpVtbl->get_Type(This,value);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_AxisCount(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,INT32 *value) {
    return This->lpVtbl->get_AxisCount(This,value);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ButtonCount(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,INT32 *value) {
    return This->lpVtbl->get_ButtonCount(This,value);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_SwitchCount(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,INT32 *value) {
    return This->lpVtbl->get_SwitchCount(This,value);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_State(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerState *state) {
    return This->lpVtbl->get_State(This,state);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Vibration(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration *vibration) {
    return This->lpVtbl->get_Vibration(This,vibration);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_put_Vibration(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineGameControllerVibration vibration) {
    return This->lpVtbl->put_Vibration(This,vibration);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ForceFeedbackMotor(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider* This,__x_ABI_CWindows_CGaming_CInput_CForceFeedback_CIForceFeedbackMotor **motor) {
    return This->lpVtbl->get_ForceFeedbackMotor(This,motor);
}
#endif
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define IID_IWineGameControllerProvider IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider
#define IWineGameControllerProviderVtbl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProviderVtbl
#define IWineGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider
#define IWineGameControllerProvider_QueryInterface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_QueryInterface
#define IWineGameControllerProvider_AddRef __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_AddRef
#define IWineGameControllerProvider_Release __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_Release
#define IWineGameControllerProvider_GetIids __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetIids
#define IWineGameControllerProvider_GetRuntimeClassName __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetRuntimeClassName
#define IWineGameControllerProvider_GetTrustLevel __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_GetTrustLevel
#define IWineGameControllerProvider_get_Type __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Type
#define IWineGameControllerProvider_get_AxisCount __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_AxisCount
#define IWineGameControllerProvider_get_ButtonCount __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ButtonCount
#define IWineGameControllerProvider_get_SwitchCount __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_SwitchCount
#define IWineGameControllerProvider_get_State __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_State
#define IWineGameControllerProvider_get_Vibration __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_Vibration
#define IWineGameControllerProvider_put_Vibration __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_put_Vibration
#define IWineGameControllerProvider_get_ForceFeedbackMotor __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_get_ForceFeedbackMotor
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#endif

#endif  /* ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineGameControllerProvider_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineForceFeedbackEffectImpl interface
 */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_INTERFACE_DEFINED__

DEFINE_GUID(IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl, 0x27833469, 0x7760, 0x417e, 0xad,0xbe, 0xe0,0x11,0xa6,0x6e,0x16,0xee);
#if defined(__cplusplus) && !defined(CINTERFACE)
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    MIDL_INTERFACE("27833469-7760-417e-adbe-e011a66e16ee")
                    IWineForceFeedbackEffectImpl : public IUnknown
                    {
                        virtual HRESULT STDMETHODCALLTYPE put_Parameters(
                            union WineForceFeedbackEffectParameters parameters,
                            struct WineForceFeedbackEffectEnvelope *envelope) = 0;

                    };
                }
            }
        }
    }
}
extern "C" {
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl, 0x27833469, 0x7760, 0x417e, 0xad,0xbe, 0xe0,0x11,0xa6,0x6e,0x16,0xee)
#endif
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImplVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl *This);

    /*** IWineForceFeedbackEffectImpl methods ***/
    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl *This,
        union __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters parameters,
        struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope *envelope);

    END_INTERFACE
} __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImplVtbl;

interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl {
    CONST_VTBL __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImplVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_Release(This) (This)->lpVtbl->Release(This)
/*** IWineForceFeedbackEffectImpl methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_put_Parameters(This,parameters,envelope) (This)->lpVtbl->put_Parameters(This,parameters,envelope)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_QueryInterface(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_AddRef(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_Release(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineForceFeedbackEffectImpl methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_put_Parameters(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl* This,union __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectParameters parameters,struct __x_ABI_CWindows_CGaming_CInput_CCustom_CWineForceFeedbackEffectEnvelope *envelope) {
    return This->lpVtbl->put_Parameters(This,parameters,envelope);
}
#endif
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define IID_IWineForceFeedbackEffectImpl IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl
#define IWineForceFeedbackEffectImplVtbl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImplVtbl
#define IWineForceFeedbackEffectImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl
#define IWineForceFeedbackEffectImpl_QueryInterface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_QueryInterface
#define IWineForceFeedbackEffectImpl_AddRef __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_AddRef
#define IWineForceFeedbackEffectImpl_Release __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_Release
#define IWineForceFeedbackEffectImpl_put_Parameters __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_put_Parameters
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#endif

#endif  /* ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineForceFeedbackEffectImpl_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineAsyncInfoImpl interface
 */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_INTERFACE_DEFINED__

DEFINE_GUID(IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl, 0x83f377ee, 0xc799, 0x11ec, 0x9d,0x64, 0x02,0x42,0xac,0x12,0x00,0x02);
#if defined(__cplusplus) && !defined(CINTERFACE)
} /* extern "C" */
namespace ABI {
    namespace Windows {
        namespace Gaming {
            namespace Input {
                namespace Custom {
                    MIDL_INTERFACE("83f377ee-c799-11ec-9d64-0242ac120002")
                    IWineAsyncInfoImpl : public IUnknown
                    {
                        virtual HRESULT STDMETHODCALLTYPE put_Completed(
                            ABI::Windows::Gaming::Input::Custom::IWineAsyncOperationCompletedHandler *handler) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_Completed(
                            ABI::Windows::Gaming::Input::Custom::IWineAsyncOperationCompletedHandler **handler) = 0;

                        virtual HRESULT STDMETHODCALLTYPE get_Result(
                            PROPVARIANT *result) = 0;

                        virtual HRESULT STDMETHODCALLTYPE Start(
                            ) = 0;

                    };
                }
            }
        }
    }
}
extern "C" {
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl, 0x83f377ee, 0xc799, 0x11ec, 0x9d,0x64, 0x02,0x42,0xac,0x12,0x00,0x02)
#endif
#else
typedef struct __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImplVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This);

    /*** IWineAsyncInfoImpl methods ***/
    HRESULT (STDMETHODCALLTYPE *put_Completed)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *handler);

    HRESULT (STDMETHODCALLTYPE *get_Completed)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler **handler);

    HRESULT (STDMETHODCALLTYPE *get_Result)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This,
        PROPVARIANT *result);

    HRESULT (STDMETHODCALLTYPE *Start)(
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl *This);

    END_INTERFACE
} __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImplVtbl;

interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl {
    CONST_VTBL __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImplVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Release(This) (This)->lpVtbl->Release(This)
/*** IWineAsyncInfoImpl methods ***/
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_put_Completed(This,handler) (This)->lpVtbl->put_Completed(This,handler)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Completed(This,handler) (This)->lpVtbl->get_Completed(This,handler)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Result(This,result) (This)->lpVtbl->get_Result(This,result)
#define __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Start(This) (This)->lpVtbl->Start(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_QueryInterface(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_AddRef(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Release(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineAsyncInfoImpl methods ***/
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_put_Completed(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This,__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler *handler) {
    return This->lpVtbl->put_Completed(This,handler);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Completed(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This,__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncOperationCompletedHandler **handler) {
    return This->lpVtbl->get_Completed(This,handler);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Result(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This,PROPVARIANT *result) {
    return This->lpVtbl->get_Result(This,result);
}
static __WIDL_INLINE HRESULT __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Start(__x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl* This) {
    return This->lpVtbl->Start(This);
}
#endif
#ifdef WIDL_using_Windows_Gaming_Input_Custom
#define IID_IWineAsyncInfoImpl IID___x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl
#define IWineAsyncInfoImplVtbl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImplVtbl
#define IWineAsyncInfoImpl __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl
#define IWineAsyncInfoImpl_QueryInterface __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_QueryInterface
#define IWineAsyncInfoImpl_AddRef __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_AddRef
#define IWineAsyncInfoImpl_Release __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Release
#define IWineAsyncInfoImpl_put_Completed __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_put_Completed
#define IWineAsyncInfoImpl_get_Completed __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Completed
#define IWineAsyncInfoImpl_get_Result __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_get_Result
#define IWineAsyncInfoImpl_Start __x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_Start
#endif /* WIDL_using_Windows_Gaming_Input_Custom */
#endif

#endif

#endif  /* ____x_ABI_CWindows_CGaming_CInput_CCustom_CIWineAsyncInfoImpl_INTERFACE_DEFINED__ */

/*
 * Class Windows.Gaming.Input.Custom.WineGameControllerProvider
 */
#ifndef RUNTIMECLASS_Windows_Gaming_Input_Custom_WineGameControllerProvider_DEFINED
#define RUNTIMECLASS_Windows_Gaming_Input_Custom_WineGameControllerProvider_DEFINED
#if !defined(_MSC_VER) && !defined(__MINGW32__)
static const WCHAR RuntimeClass_Windows_Gaming_Input_Custom_WineGameControllerProvider[] = {'W','i','n','d','o','w','s','.','G','a','m','i','n','g','.','I','n','p','u','t','.','C','u','s','t','o','m','.','W','i','n','e','G','a','m','e','C','o','n','t','r','o','l','l','e','r','P','r','o','v','i','d','e','r',0};
#elif defined(__GNUC__) && !defined(__cplusplus)
const DECLSPEC_SELECTANY WCHAR RuntimeClass_Windows_Gaming_Input_Custom_WineGameControllerProvider[] = L"Windows.Gaming.Input.Custom.WineGameControllerProvider";
#else
extern const DECLSPEC_SELECTANY WCHAR RuntimeClass_Windows_Gaming_Input_Custom_WineGameControllerProvider[] = {'W','i','n','d','o','w','s','.','G','a','m','i','n','g','.','I','n','p','u','t','.','C','u','s','t','o','m','.','W','i','n','e','G','a','m','e','C','o','n','t','r','o','l','l','e','r','P','r','o','v','i','d','e','r',0};
#endif
#endif /* RUNTIMECLASS_Windows_Gaming_Input_Custom_WineGameControllerProvider_DEFINED */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER LPSAFEARRAY_UserSize     (ULONG *, ULONG, LPSAFEARRAY *);
unsigned char * __RPC_USER LPSAFEARRAY_UserMarshal  (ULONG *, unsigned char *, LPSAFEARRAY *);
unsigned char * __RPC_USER LPSAFEARRAY_UserUnmarshal(ULONG *, unsigned char *, LPSAFEARRAY *);
void            __RPC_USER LPSAFEARRAY_UserFree     (ULONG *, LPSAFEARRAY *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __provider_h__ */
