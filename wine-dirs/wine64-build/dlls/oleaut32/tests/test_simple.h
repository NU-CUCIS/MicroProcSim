/*** Autogenerated by WIDL 8.0-rc1 from ../wine-source/dlls/oleaut32/tests/test_simple.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __test_simple_h__
#define __test_simple_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __IBaseIface_FWD_DEFINED__
#define __IBaseIface_FWD_DEFINED__
typedef interface IBaseIface IBaseIface;
#ifdef __cplusplus
interface IBaseIface;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __base_LIBRARY_DEFINED__
#define __base_LIBRARY_DEFINED__

DEFINE_GUID(LIBID_base, 0x8b05fe77, 0x4a6c, 0x4133, 0xb9,0xcd, 0x8f,0x00,0x00,0x7a,0xf7,0x86);

/*****************************************************************************
 * IBaseIface interface
 */
#ifndef __IBaseIface_INTERFACE_DEFINED__
#define __IBaseIface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBaseIface, 0xb14b6bb5, 0x904e, 0x4ff9, 0xb2,0x47, 0xbd,0x36,0x1f,0x7a,0x00,0x04);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b14b6bb5-904e-4ff9-b247-bd361f7a0004")
IBaseIface : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE simple_test(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBaseIface, 0xb14b6bb5, 0x904e, 0x4ff9, 0xb2,0x47, 0xbd,0x36,0x1f,0x7a,0x00,0x04)
#endif
#else
typedef struct IBaseIfaceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBaseIface *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBaseIface *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBaseIface *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IBaseIface *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IBaseIface *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IBaseIface *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IBaseIface *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IBaseIface methods ***/
    HRESULT (STDMETHODCALLTYPE *simple_test)(
        IBaseIface *This);

    END_INTERFACE
} IBaseIfaceVtbl;

interface IBaseIface {
    CONST_VTBL IBaseIfaceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBaseIface_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBaseIface_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBaseIface_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IBaseIface_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IBaseIface_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IBaseIface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IBaseIface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IBaseIface methods ***/
#define IBaseIface_simple_test(This) (This)->lpVtbl->simple_test(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IBaseIface_QueryInterface(IBaseIface* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IBaseIface_AddRef(IBaseIface* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IBaseIface_Release(IBaseIface* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IBaseIface_GetTypeInfoCount(IBaseIface* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IBaseIface_GetTypeInfo(IBaseIface* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IBaseIface_GetIDsOfNames(IBaseIface* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IBaseIface_Invoke(IBaseIface* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IBaseIface methods ***/
static __WIDL_INLINE HRESULT IBaseIface_simple_test(IBaseIface* This) {
    return This->lpVtbl->simple_test(This);
}
#endif
#endif

#endif


#endif  /* __IBaseIface_INTERFACE_DEFINED__ */

#endif /* __base_LIBRARY_DEFINED__ */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __test_simple_h__ */
