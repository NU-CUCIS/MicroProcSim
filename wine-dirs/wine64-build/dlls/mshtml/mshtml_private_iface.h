/*** Autogenerated by WIDL 8.0-rc1 from ../wine-source/dlls/mshtml/mshtml_private_iface.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __mshtml_private_iface_h__
#define __mshtml_private_iface_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __IWineMSHTMLConsole_FWD_DEFINED__
#define __IWineMSHTMLConsole_FWD_DEFINED__
typedef interface IWineMSHTMLConsole IWineMSHTMLConsole;
#ifdef __cplusplus
interface IWineMSHTMLConsole;
#endif /* __cplusplus */
#endif

#ifndef __IWineMSHTMLMediaQueryList_FWD_DEFINED__
#define __IWineMSHTMLMediaQueryList_FWD_DEFINED__
typedef interface IWineMSHTMLMediaQueryList IWineMSHTMLMediaQueryList;
#ifdef __cplusplus
interface IWineMSHTMLMediaQueryList;
#endif /* __cplusplus */
#endif

#ifndef __IWineHTMLWindowPrivate_FWD_DEFINED__
#define __IWineHTMLWindowPrivate_FWD_DEFINED__
typedef interface IWineHTMLWindowPrivate IWineHTMLWindowPrivate;
#ifdef __cplusplus
interface IWineHTMLWindowPrivate;
#endif /* __cplusplus */
#endif

#ifndef __IWineHTMLWindowCompatPrivate_FWD_DEFINED__
#define __IWineHTMLWindowCompatPrivate_FWD_DEFINED__
typedef interface IWineHTMLWindowCompatPrivate IWineHTMLWindowCompatPrivate;
#ifdef __cplusplus
interface IWineHTMLWindowCompatPrivate;
#endif /* __cplusplus */
#endif

#ifndef __IWineHTMLElementPrivate_FWD_DEFINED__
#define __IWineHTMLElementPrivate_FWD_DEFINED__
typedef interface IWineHTMLElementPrivate IWineHTMLElementPrivate;
#ifdef __cplusplus
interface IWineHTMLElementPrivate;
#endif /* __cplusplus */
#endif

#ifndef __IWineDOMTokenList_FWD_DEFINED__
#define __IWineDOMTokenList_FWD_DEFINED__
typedef interface IWineDOMTokenList IWineDOMTokenList;
#ifdef __cplusplus
interface IWineDOMTokenList;
#endif /* __cplusplus */
#endif

#ifndef __IWinePageTransitionEvent_FWD_DEFINED__
#define __IWinePageTransitionEvent_FWD_DEFINED__
typedef interface IWinePageTransitionEvent IWinePageTransitionEvent;
#ifdef __cplusplus
interface IWinePageTransitionEvent;
#endif /* __cplusplus */
#endif

#ifndef __IWineXMLHttpRequestPrivate_FWD_DEFINED__
#define __IWineXMLHttpRequestPrivate_FWD_DEFINED__
typedef interface IWineXMLHttpRequestPrivate IWineXMLHttpRequestPrivate;
#ifdef __cplusplus
interface IWineXMLHttpRequestPrivate;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __MSHTML_private_LIBRARY_DEFINED__
#define __MSHTML_private_LIBRARY_DEFINED__

DEFINE_GUID(LIBID_MSHTML_private, 0x90de541e, 0x380b, 0x4530, 0x94,0xa9, 0x97,0x36,0x7f,0xe4,0x9d,0x8d);

/*****************************************************************************
 * IWineMSHTMLConsole interface
 */
#ifndef __IWineMSHTMLConsole_INTERFACE_DEFINED__
#define __IWineMSHTMLConsole_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineMSHTMLConsole, 0xfd55b4b6, 0x2813, 0x4fb4, 0x82,0x9d, 0x38,0x00,0x99,0x47,0x4a,0xb1);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fd55b4b6-2813-4fb4-829d-380099474ab1")
IWineMSHTMLConsole : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE assert(
        VARIANT_BOOL *assertion,
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE clear(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE count(
        VARIANT *label) = 0;

    virtual HRESULT STDMETHODCALLTYPE debug(
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE dir(
        VARIANT *object) = 0;

    virtual HRESULT STDMETHODCALLTYPE dirxml(
        VARIANT *object) = 0;

    virtual HRESULT STDMETHODCALLTYPE error(
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE group(
        VARIANT *label) = 0;

    virtual HRESULT STDMETHODCALLTYPE groupCollapsed(
        VARIANT *label) = 0;

    virtual HRESULT STDMETHODCALLTYPE groupEnd(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE info(
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE log(
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE time(
        VARIANT *label) = 0;

    virtual HRESULT STDMETHODCALLTYPE timeEnd(
        VARIANT *label) = 0;

    virtual HRESULT STDMETHODCALLTYPE trace(
        VARIANT *varargStart) = 0;

    virtual HRESULT STDMETHODCALLTYPE warn(
        VARIANT *varargStart) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineMSHTMLConsole, 0xfd55b4b6, 0x2813, 0x4fb4, 0x82,0x9d, 0x38,0x00,0x99,0x47,0x4a,0xb1)
#endif
#else
typedef struct IWineMSHTMLConsoleVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineMSHTMLConsole *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineMSHTMLConsole *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineMSHTMLConsole *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineMSHTMLConsole *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineMSHTMLConsole *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineMSHTMLConsole *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineMSHTMLConsole *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineMSHTMLConsole methods ***/
    HRESULT (STDMETHODCALLTYPE *assert)(
        IWineMSHTMLConsole *This,
        VARIANT_BOOL *assertion,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *clear)(
        IWineMSHTMLConsole *This);

    HRESULT (STDMETHODCALLTYPE *count)(
        IWineMSHTMLConsole *This,
        VARIANT *label);

    HRESULT (STDMETHODCALLTYPE *debug)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *dir)(
        IWineMSHTMLConsole *This,
        VARIANT *object);

    HRESULT (STDMETHODCALLTYPE *dirxml)(
        IWineMSHTMLConsole *This,
        VARIANT *object);

    HRESULT (STDMETHODCALLTYPE *error)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *group)(
        IWineMSHTMLConsole *This,
        VARIANT *label);

    HRESULT (STDMETHODCALLTYPE *groupCollapsed)(
        IWineMSHTMLConsole *This,
        VARIANT *label);

    HRESULT (STDMETHODCALLTYPE *groupEnd)(
        IWineMSHTMLConsole *This);

    HRESULT (STDMETHODCALLTYPE *info)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *log)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *time)(
        IWineMSHTMLConsole *This,
        VARIANT *label);

    HRESULT (STDMETHODCALLTYPE *timeEnd)(
        IWineMSHTMLConsole *This,
        VARIANT *label);

    HRESULT (STDMETHODCALLTYPE *trace)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    HRESULT (STDMETHODCALLTYPE *warn)(
        IWineMSHTMLConsole *This,
        VARIANT *varargStart);

    END_INTERFACE
} IWineMSHTMLConsoleVtbl;

interface IWineMSHTMLConsole {
    CONST_VTBL IWineMSHTMLConsoleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineMSHTMLConsole_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineMSHTMLConsole_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineMSHTMLConsole_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineMSHTMLConsole_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineMSHTMLConsole_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineMSHTMLConsole_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineMSHTMLConsole_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineMSHTMLConsole methods ***/
#define IWineMSHTMLConsole_assert(This,assertion,varargStart) (This)->lpVtbl->assert(This,assertion,varargStart)
#define IWineMSHTMLConsole_clear(This) (This)->lpVtbl->clear(This)
#define IWineMSHTMLConsole_count(This,label) (This)->lpVtbl->count(This,label)
#define IWineMSHTMLConsole_debug(This,varargStart) (This)->lpVtbl->debug(This,varargStart)
#define IWineMSHTMLConsole_dir(This,object) (This)->lpVtbl->dir(This,object)
#define IWineMSHTMLConsole_dirxml(This,object) (This)->lpVtbl->dirxml(This,object)
#define IWineMSHTMLConsole_error(This,varargStart) (This)->lpVtbl->error(This,varargStart)
#define IWineMSHTMLConsole_group(This,label) (This)->lpVtbl->group(This,label)
#define IWineMSHTMLConsole_groupCollapsed(This,label) (This)->lpVtbl->groupCollapsed(This,label)
#define IWineMSHTMLConsole_groupEnd(This) (This)->lpVtbl->groupEnd(This)
#define IWineMSHTMLConsole_info(This,varargStart) (This)->lpVtbl->info(This,varargStart)
#define IWineMSHTMLConsole_log(This,varargStart) (This)->lpVtbl->log(This,varargStart)
#define IWineMSHTMLConsole_time(This,label) (This)->lpVtbl->time(This,label)
#define IWineMSHTMLConsole_timeEnd(This,label) (This)->lpVtbl->timeEnd(This,label)
#define IWineMSHTMLConsole_trace(This,varargStart) (This)->lpVtbl->trace(This,varargStart)
#define IWineMSHTMLConsole_warn(This,varargStart) (This)->lpVtbl->warn(This,varargStart)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_QueryInterface(IWineMSHTMLConsole* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineMSHTMLConsole_AddRef(IWineMSHTMLConsole* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineMSHTMLConsole_Release(IWineMSHTMLConsole* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_GetTypeInfoCount(IWineMSHTMLConsole* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_GetTypeInfo(IWineMSHTMLConsole* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_GetIDsOfNames(IWineMSHTMLConsole* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_Invoke(IWineMSHTMLConsole* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineMSHTMLConsole methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_assert(IWineMSHTMLConsole* This,VARIANT_BOOL *assertion,VARIANT *varargStart) {
    return This->lpVtbl->assert(This,assertion,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_clear(IWineMSHTMLConsole* This) {
    return This->lpVtbl->clear(This);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_count(IWineMSHTMLConsole* This,VARIANT *label) {
    return This->lpVtbl->count(This,label);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_debug(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->debug(This,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_dir(IWineMSHTMLConsole* This,VARIANT *object) {
    return This->lpVtbl->dir(This,object);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_dirxml(IWineMSHTMLConsole* This,VARIANT *object) {
    return This->lpVtbl->dirxml(This,object);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_error(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->error(This,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_group(IWineMSHTMLConsole* This,VARIANT *label) {
    return This->lpVtbl->group(This,label);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_groupCollapsed(IWineMSHTMLConsole* This,VARIANT *label) {
    return This->lpVtbl->groupCollapsed(This,label);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_groupEnd(IWineMSHTMLConsole* This) {
    return This->lpVtbl->groupEnd(This);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_info(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->info(This,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_log(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->log(This,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_time(IWineMSHTMLConsole* This,VARIANT *label) {
    return This->lpVtbl->time(This,label);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_timeEnd(IWineMSHTMLConsole* This,VARIANT *label) {
    return This->lpVtbl->timeEnd(This,label);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_trace(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->trace(This,varargStart);
}
static __WIDL_INLINE HRESULT IWineMSHTMLConsole_warn(IWineMSHTMLConsole* This,VARIANT *varargStart) {
    return This->lpVtbl->warn(This,varargStart);
}
#endif
#endif

#endif


#endif  /* __IWineMSHTMLConsole_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineMSHTMLMediaQueryList interface
 */
#ifndef __IWineMSHTMLMediaQueryList_INTERFACE_DEFINED__
#define __IWineMSHTMLMediaQueryList_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineMSHTMLMediaQueryList, 0xfd55b4b6, 0x2813, 0x4fb4, 0x82,0x9d, 0x38,0x00,0x99,0x47,0x4a,0xb0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fd55b4b6-2813-4fb4-829d-380099474ab0")
IWineMSHTMLMediaQueryList : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_media(
        BSTR *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_matches(
        VARIANT_BOOL *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE addListener(
        VARIANT *listener) = 0;

    virtual HRESULT STDMETHODCALLTYPE removeListener(
        VARIANT *listener) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineMSHTMLMediaQueryList, 0xfd55b4b6, 0x2813, 0x4fb4, 0x82,0x9d, 0x38,0x00,0x99,0x47,0x4a,0xb0)
#endif
#else
typedef struct IWineMSHTMLMediaQueryListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineMSHTMLMediaQueryList *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineMSHTMLMediaQueryList *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineMSHTMLMediaQueryList *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineMSHTMLMediaQueryList *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineMSHTMLMediaQueryList *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineMSHTMLMediaQueryList *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineMSHTMLMediaQueryList *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineMSHTMLMediaQueryList methods ***/
    HRESULT (STDMETHODCALLTYPE *get_media)(
        IWineMSHTMLMediaQueryList *This,
        BSTR *p);

    HRESULT (STDMETHODCALLTYPE *get_matches)(
        IWineMSHTMLMediaQueryList *This,
        VARIANT_BOOL *p);

    HRESULT (STDMETHODCALLTYPE *addListener)(
        IWineMSHTMLMediaQueryList *This,
        VARIANT *listener);

    HRESULT (STDMETHODCALLTYPE *removeListener)(
        IWineMSHTMLMediaQueryList *This,
        VARIANT *listener);

    END_INTERFACE
} IWineMSHTMLMediaQueryListVtbl;

interface IWineMSHTMLMediaQueryList {
    CONST_VTBL IWineMSHTMLMediaQueryListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineMSHTMLMediaQueryList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineMSHTMLMediaQueryList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineMSHTMLMediaQueryList_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineMSHTMLMediaQueryList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineMSHTMLMediaQueryList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineMSHTMLMediaQueryList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineMSHTMLMediaQueryList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineMSHTMLMediaQueryList methods ***/
#define IWineMSHTMLMediaQueryList_get_media(This,p) (This)->lpVtbl->get_media(This,p)
#define IWineMSHTMLMediaQueryList_get_matches(This,p) (This)->lpVtbl->get_matches(This,p)
#define IWineMSHTMLMediaQueryList_addListener(This,listener) (This)->lpVtbl->addListener(This,listener)
#define IWineMSHTMLMediaQueryList_removeListener(This,listener) (This)->lpVtbl->removeListener(This,listener)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_QueryInterface(IWineMSHTMLMediaQueryList* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineMSHTMLMediaQueryList_AddRef(IWineMSHTMLMediaQueryList* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineMSHTMLMediaQueryList_Release(IWineMSHTMLMediaQueryList* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_GetTypeInfoCount(IWineMSHTMLMediaQueryList* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_GetTypeInfo(IWineMSHTMLMediaQueryList* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_GetIDsOfNames(IWineMSHTMLMediaQueryList* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_Invoke(IWineMSHTMLMediaQueryList* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineMSHTMLMediaQueryList methods ***/
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_get_media(IWineMSHTMLMediaQueryList* This,BSTR *p) {
    return This->lpVtbl->get_media(This,p);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_get_matches(IWineMSHTMLMediaQueryList* This,VARIANT_BOOL *p) {
    return This->lpVtbl->get_matches(This,p);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_addListener(IWineMSHTMLMediaQueryList* This,VARIANT *listener) {
    return This->lpVtbl->addListener(This,listener);
}
static __WIDL_INLINE HRESULT IWineMSHTMLMediaQueryList_removeListener(IWineMSHTMLMediaQueryList* This,VARIANT *listener) {
    return This->lpVtbl->removeListener(This,listener);
}
#endif
#endif

#endif


#endif  /* __IWineMSHTMLMediaQueryList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineHTMLWindowPrivate interface
 */
#ifndef __IWineHTMLWindowPrivate_INTERFACE_DEFINED__
#define __IWineHTMLWindowPrivate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineHTMLWindowPrivate, 0x1b5939fc, 0x8f84, 0x43f3, 0x8d,0x89, 0xf9,0xa9,0x20,0x69,0xfa,0xd7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1b5939fc-8f84-43f3-8d89-f9a92069fad7")
IWineHTMLWindowPrivate : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE requestAnimationFrame(
        VARIANT *expr,
        VARIANT *timer_id) = 0;

    virtual HRESULT STDMETHODCALLTYPE cancelAnimationFrame(
        VARIANT timer_id) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_console(
        IDispatch **console) = 0;

    virtual HRESULT STDMETHODCALLTYPE matchMedia(
        BSTR media_query,
        IDispatch **media_query_list) = 0;

    virtual HRESULT STDMETHODCALLTYPE postMessage(
        VARIANT msg,
        BSTR targetOrigin,
        VARIANT transfer) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineHTMLWindowPrivate, 0x1b5939fc, 0x8f84, 0x43f3, 0x8d,0x89, 0xf9,0xa9,0x20,0x69,0xfa,0xd7)
#endif
#else
typedef struct IWineHTMLWindowPrivateVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineHTMLWindowPrivate *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineHTMLWindowPrivate *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineHTMLWindowPrivate *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineHTMLWindowPrivate *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineHTMLWindowPrivate *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineHTMLWindowPrivate *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineHTMLWindowPrivate *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineHTMLWindowPrivate methods ***/
    HRESULT (STDMETHODCALLTYPE *requestAnimationFrame)(
        IWineHTMLWindowPrivate *This,
        VARIANT *expr,
        VARIANT *timer_id);

    HRESULT (STDMETHODCALLTYPE *cancelAnimationFrame)(
        IWineHTMLWindowPrivate *This,
        VARIANT timer_id);

    HRESULT (STDMETHODCALLTYPE *get_console)(
        IWineHTMLWindowPrivate *This,
        IDispatch **console);

    HRESULT (STDMETHODCALLTYPE *matchMedia)(
        IWineHTMLWindowPrivate *This,
        BSTR media_query,
        IDispatch **media_query_list);

    HRESULT (STDMETHODCALLTYPE *postMessage)(
        IWineHTMLWindowPrivate *This,
        VARIANT msg,
        BSTR targetOrigin,
        VARIANT transfer);

    END_INTERFACE
} IWineHTMLWindowPrivateVtbl;

interface IWineHTMLWindowPrivate {
    CONST_VTBL IWineHTMLWindowPrivateVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineHTMLWindowPrivate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineHTMLWindowPrivate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineHTMLWindowPrivate_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineHTMLWindowPrivate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineHTMLWindowPrivate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineHTMLWindowPrivate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineHTMLWindowPrivate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineHTMLWindowPrivate methods ***/
#define IWineHTMLWindowPrivate_requestAnimationFrame(This,expr,timer_id) (This)->lpVtbl->requestAnimationFrame(This,expr,timer_id)
#define IWineHTMLWindowPrivate_cancelAnimationFrame(This,timer_id) (This)->lpVtbl->cancelAnimationFrame(This,timer_id)
#define IWineHTMLWindowPrivate_get_console(This,console) (This)->lpVtbl->get_console(This,console)
#define IWineHTMLWindowPrivate_matchMedia(This,media_query,media_query_list) (This)->lpVtbl->matchMedia(This,media_query,media_query_list)
#define IWineHTMLWindowPrivate_postMessage(This,msg,targetOrigin,transfer) (This)->lpVtbl->postMessage(This,msg,targetOrigin,transfer)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_QueryInterface(IWineHTMLWindowPrivate* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineHTMLWindowPrivate_AddRef(IWineHTMLWindowPrivate* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineHTMLWindowPrivate_Release(IWineHTMLWindowPrivate* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_GetTypeInfoCount(IWineHTMLWindowPrivate* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_GetTypeInfo(IWineHTMLWindowPrivate* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_GetIDsOfNames(IWineHTMLWindowPrivate* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_Invoke(IWineHTMLWindowPrivate* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineHTMLWindowPrivate methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_requestAnimationFrame(IWineHTMLWindowPrivate* This,VARIANT *expr,VARIANT *timer_id) {
    return This->lpVtbl->requestAnimationFrame(This,expr,timer_id);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_cancelAnimationFrame(IWineHTMLWindowPrivate* This,VARIANT timer_id) {
    return This->lpVtbl->cancelAnimationFrame(This,timer_id);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_get_console(IWineHTMLWindowPrivate* This,IDispatch **console) {
    return This->lpVtbl->get_console(This,console);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_matchMedia(IWineHTMLWindowPrivate* This,BSTR media_query,IDispatch **media_query_list) {
    return This->lpVtbl->matchMedia(This,media_query,media_query_list);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowPrivate_postMessage(IWineHTMLWindowPrivate* This,VARIANT msg,BSTR targetOrigin,VARIANT transfer) {
    return This->lpVtbl->postMessage(This,msg,targetOrigin,transfer);
}
#endif
#endif

#endif


#endif  /* __IWineHTMLWindowPrivate_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineHTMLWindowCompatPrivate interface
 */
#ifndef __IWineHTMLWindowCompatPrivate_INTERFACE_DEFINED__
#define __IWineHTMLWindowCompatPrivate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineHTMLWindowCompatPrivate, 0x1b5939fc, 0x8f84, 0x43f3, 0x8d,0x89, 0xf9,0xa9,0x20,0x69,0xfa,0xd6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1b5939fc-8f84-43f3-8d89-f9a92069fad6")
IWineHTMLWindowCompatPrivate : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE put_performance(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_performance(
        VARIANT *p) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineHTMLWindowCompatPrivate, 0x1b5939fc, 0x8f84, 0x43f3, 0x8d,0x89, 0xf9,0xa9,0x20,0x69,0xfa,0xd6)
#endif
#else
typedef struct IWineHTMLWindowCompatPrivateVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineHTMLWindowCompatPrivate *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineHTMLWindowCompatPrivate *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineHTMLWindowCompatPrivate *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineHTMLWindowCompatPrivate *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineHTMLWindowCompatPrivate *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineHTMLWindowCompatPrivate *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineHTMLWindowCompatPrivate *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineHTMLWindowCompatPrivate methods ***/
    HRESULT (STDMETHODCALLTYPE *put_performance)(
        IWineHTMLWindowCompatPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_performance)(
        IWineHTMLWindowCompatPrivate *This,
        VARIANT *p);

    END_INTERFACE
} IWineHTMLWindowCompatPrivateVtbl;

interface IWineHTMLWindowCompatPrivate {
    CONST_VTBL IWineHTMLWindowCompatPrivateVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineHTMLWindowCompatPrivate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineHTMLWindowCompatPrivate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineHTMLWindowCompatPrivate_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineHTMLWindowCompatPrivate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineHTMLWindowCompatPrivate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineHTMLWindowCompatPrivate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineHTMLWindowCompatPrivate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineHTMLWindowCompatPrivate methods ***/
#define IWineHTMLWindowCompatPrivate_put_performance(This,v) (This)->lpVtbl->put_performance(This,v)
#define IWineHTMLWindowCompatPrivate_get_performance(This,p) (This)->lpVtbl->get_performance(This,p)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_QueryInterface(IWineHTMLWindowCompatPrivate* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineHTMLWindowCompatPrivate_AddRef(IWineHTMLWindowCompatPrivate* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineHTMLWindowCompatPrivate_Release(IWineHTMLWindowCompatPrivate* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_GetTypeInfoCount(IWineHTMLWindowCompatPrivate* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_GetTypeInfo(IWineHTMLWindowCompatPrivate* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_GetIDsOfNames(IWineHTMLWindowCompatPrivate* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_Invoke(IWineHTMLWindowCompatPrivate* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineHTMLWindowCompatPrivate methods ***/
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_put_performance(IWineHTMLWindowCompatPrivate* This,VARIANT v) {
    return This->lpVtbl->put_performance(This,v);
}
static __WIDL_INLINE HRESULT IWineHTMLWindowCompatPrivate_get_performance(IWineHTMLWindowCompatPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_performance(This,p);
}
#endif
#endif

#endif


#endif  /* __IWineHTMLWindowCompatPrivate_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineHTMLElementPrivate interface
 */
#ifndef __IWineHTMLElementPrivate_INTERFACE_DEFINED__
#define __IWineHTMLElementPrivate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineHTMLElementPrivate, 0x465908fd, 0xf394, 0x489f, 0xb7,0xa3, 0x4c,0x00,0xfb,0xbe,0x9e,0xec);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("465908fd-f394-489f-b7a3-4c00fbbe9eec")
IWineHTMLElementPrivate : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_classList(
        IDispatch **class_list) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineHTMLElementPrivate, 0x465908fd, 0xf394, 0x489f, 0xb7,0xa3, 0x4c,0x00,0xfb,0xbe,0x9e,0xec)
#endif
#else
typedef struct IWineHTMLElementPrivateVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineHTMLElementPrivate *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineHTMLElementPrivate *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineHTMLElementPrivate *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineHTMLElementPrivate *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineHTMLElementPrivate *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineHTMLElementPrivate *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineHTMLElementPrivate *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineHTMLElementPrivate methods ***/
    HRESULT (STDMETHODCALLTYPE *get_classList)(
        IWineHTMLElementPrivate *This,
        IDispatch **class_list);

    END_INTERFACE
} IWineHTMLElementPrivateVtbl;

interface IWineHTMLElementPrivate {
    CONST_VTBL IWineHTMLElementPrivateVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineHTMLElementPrivate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineHTMLElementPrivate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineHTMLElementPrivate_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineHTMLElementPrivate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineHTMLElementPrivate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineHTMLElementPrivate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineHTMLElementPrivate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineHTMLElementPrivate methods ***/
#define IWineHTMLElementPrivate_get_classList(This,class_list) (This)->lpVtbl->get_classList(This,class_list)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_QueryInterface(IWineHTMLElementPrivate* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineHTMLElementPrivate_AddRef(IWineHTMLElementPrivate* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineHTMLElementPrivate_Release(IWineHTMLElementPrivate* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_GetTypeInfoCount(IWineHTMLElementPrivate* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_GetTypeInfo(IWineHTMLElementPrivate* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_GetIDsOfNames(IWineHTMLElementPrivate* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_Invoke(IWineHTMLElementPrivate* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineHTMLElementPrivate methods ***/
static __WIDL_INLINE HRESULT IWineHTMLElementPrivate_get_classList(IWineHTMLElementPrivate* This,IDispatch **class_list) {
    return This->lpVtbl->get_classList(This,class_list);
}
#endif
#endif

#endif


#endif  /* __IWineHTMLElementPrivate_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDOMTokenList interface
 */
#ifndef __IWineDOMTokenList_INTERFACE_DEFINED__
#define __IWineDOMTokenList_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDOMTokenList, 0x08ef0edd, 0x5fb8, 0x4178, 0xa2,0xf0, 0x9f,0x68,0x6e,0x00,0x44,0x1b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("08ef0edd-5fb8-4178-a2f0-9f686e00441b")
IWineDOMTokenList : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE add(
        BSTR token) = 0;

    virtual HRESULT STDMETHODCALLTYPE remove(
        BSTR token) = 0;

    virtual HRESULT STDMETHODCALLTYPE toString(
        BSTR *String) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDOMTokenList, 0x08ef0edd, 0x5fb8, 0x4178, 0xa2,0xf0, 0x9f,0x68,0x6e,0x00,0x44,0x1b)
#endif
#else
typedef struct IWineDOMTokenListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDOMTokenList *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDOMTokenList *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDOMTokenList *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineDOMTokenList *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineDOMTokenList *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineDOMTokenList *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineDOMTokenList *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineDOMTokenList methods ***/
    HRESULT (STDMETHODCALLTYPE *add)(
        IWineDOMTokenList *This,
        BSTR token);

    HRESULT (STDMETHODCALLTYPE *remove)(
        IWineDOMTokenList *This,
        BSTR token);

    HRESULT (STDMETHODCALLTYPE *toString)(
        IWineDOMTokenList *This,
        BSTR *String);

    END_INTERFACE
} IWineDOMTokenListVtbl;

interface IWineDOMTokenList {
    CONST_VTBL IWineDOMTokenListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDOMTokenList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDOMTokenList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDOMTokenList_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineDOMTokenList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineDOMTokenList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineDOMTokenList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineDOMTokenList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineDOMTokenList methods ***/
#define IWineDOMTokenList_add(This,token) (This)->lpVtbl->add(This,token)
#define IWineDOMTokenList_remove(This,token) (This)->lpVtbl->remove(This,token)
#define IWineDOMTokenList_toString(This,String) (This)->lpVtbl->toString(This,String)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineDOMTokenList_QueryInterface(IWineDOMTokenList* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineDOMTokenList_AddRef(IWineDOMTokenList* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineDOMTokenList_Release(IWineDOMTokenList* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineDOMTokenList_GetTypeInfoCount(IWineDOMTokenList* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineDOMTokenList_GetTypeInfo(IWineDOMTokenList* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineDOMTokenList_GetIDsOfNames(IWineDOMTokenList* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineDOMTokenList_Invoke(IWineDOMTokenList* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineDOMTokenList methods ***/
static __WIDL_INLINE HRESULT IWineDOMTokenList_add(IWineDOMTokenList* This,BSTR token) {
    return This->lpVtbl->add(This,token);
}
static __WIDL_INLINE HRESULT IWineDOMTokenList_remove(IWineDOMTokenList* This,BSTR token) {
    return This->lpVtbl->remove(This,token);
}
static __WIDL_INLINE HRESULT IWineDOMTokenList_toString(IWineDOMTokenList* This,BSTR *String) {
    return This->lpVtbl->toString(This,String);
}
#endif
#endif

#endif


#endif  /* __IWineDOMTokenList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWinePageTransitionEvent interface
 */
#ifndef __IWinePageTransitionEvent_INTERFACE_DEFINED__
#define __IWinePageTransitionEvent_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWinePageTransitionEvent, 0x25508c5d, 0x6a54, 0x6888, 0x8f,0x41, 0x75,0xff,0x3a,0xe8,0x70,0x6b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("25508c5d-6a54-6888-8f41-75ff3ae8706b")
IWinePageTransitionEvent : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_persisted(
        VARIANT_BOOL *ret) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWinePageTransitionEvent, 0x25508c5d, 0x6a54, 0x6888, 0x8f,0x41, 0x75,0xff,0x3a,0xe8,0x70,0x6b)
#endif
#else
typedef struct IWinePageTransitionEventVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWinePageTransitionEvent *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWinePageTransitionEvent *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWinePageTransitionEvent *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWinePageTransitionEvent *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWinePageTransitionEvent *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWinePageTransitionEvent *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWinePageTransitionEvent *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWinePageTransitionEvent methods ***/
    HRESULT (STDMETHODCALLTYPE *get_persisted)(
        IWinePageTransitionEvent *This,
        VARIANT_BOOL *ret);

    END_INTERFACE
} IWinePageTransitionEventVtbl;

interface IWinePageTransitionEvent {
    CONST_VTBL IWinePageTransitionEventVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWinePageTransitionEvent_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWinePageTransitionEvent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWinePageTransitionEvent_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWinePageTransitionEvent_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWinePageTransitionEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWinePageTransitionEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWinePageTransitionEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWinePageTransitionEvent methods ***/
#define IWinePageTransitionEvent_get_persisted(This,ret) (This)->lpVtbl->get_persisted(This,ret)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_QueryInterface(IWinePageTransitionEvent* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWinePageTransitionEvent_AddRef(IWinePageTransitionEvent* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWinePageTransitionEvent_Release(IWinePageTransitionEvent* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_GetTypeInfoCount(IWinePageTransitionEvent* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_GetTypeInfo(IWinePageTransitionEvent* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_GetIDsOfNames(IWinePageTransitionEvent* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_Invoke(IWinePageTransitionEvent* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWinePageTransitionEvent methods ***/
static __WIDL_INLINE HRESULT IWinePageTransitionEvent_get_persisted(IWinePageTransitionEvent* This,VARIANT_BOOL *ret) {
    return This->lpVtbl->get_persisted(This,ret);
}
#endif
#endif

#endif


#endif  /* __IWinePageTransitionEvent_INTERFACE_DEFINED__ */

#define DISPID_IWINEXMLHTTPREQUESTPRIVATE_RESPONSE (1)

#define DISPID_IWINEXMLHTTPREQUESTPRIVATE_RESPONSETYPE (2)

#define DISPID_IWINEXMLHTTPREQUESTPRIVATE_UPLOAD (3)

#define DISPID_IWINEXMLHTTPREQUESTPRIVATE_WITHCREDENTIALS (4)

#define DISPID_IWINEXMLHTTPREQUESTPRIVATE_OVERRIDEMIMETYPE (5)

/*****************************************************************************
 * IWineXMLHttpRequestPrivate interface
 */
#ifndef __IWineXMLHttpRequestPrivate_INTERFACE_DEFINED__
#define __IWineXMLHttpRequestPrivate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineXMLHttpRequestPrivate, 0x08ef0edd, 0x5fb8, 0x4178, 0xa2,0xf0, 0x9f,0x68,0x6e,0x00,0x44,0x1c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("08ef0edd-5fb8-4178-a2f0-9f686e00441c")
IWineXMLHttpRequestPrivate : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_response(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_responseType(
        BSTR v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_responseType(
        BSTR *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_upload(
        IDispatch **p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_withCredentials(
        VARIANT_BOOL v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_withCredentials(
        VARIANT_BOOL *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE overrideMimeType(
        BSTR mimeType) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onerror(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onerror(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onabort(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onabort(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onprogress(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onprogress(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onloadstart(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onloadstart(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onloadend(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onloadend(
        VARIANT *p) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_onload(
        VARIANT v) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_onload(
        VARIANT *p) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineXMLHttpRequestPrivate, 0x08ef0edd, 0x5fb8, 0x4178, 0xa2,0xf0, 0x9f,0x68,0x6e,0x00,0x44,0x1c)
#endif
#else
typedef struct IWineXMLHttpRequestPrivateVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineXMLHttpRequestPrivate *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineXMLHttpRequestPrivate *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineXMLHttpRequestPrivate *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWineXMLHttpRequestPrivate *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWineXMLHttpRequestPrivate *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWineXMLHttpRequestPrivate *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWineXMLHttpRequestPrivate *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWineXMLHttpRequestPrivate methods ***/
    HRESULT (STDMETHODCALLTYPE *get_response)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_responseType)(
        IWineXMLHttpRequestPrivate *This,
        BSTR v);

    HRESULT (STDMETHODCALLTYPE *get_responseType)(
        IWineXMLHttpRequestPrivate *This,
        BSTR *p);

    HRESULT (STDMETHODCALLTYPE *get_upload)(
        IWineXMLHttpRequestPrivate *This,
        IDispatch **p);

    HRESULT (STDMETHODCALLTYPE *put_withCredentials)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT_BOOL v);

    HRESULT (STDMETHODCALLTYPE *get_withCredentials)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT_BOOL *p);

    HRESULT (STDMETHODCALLTYPE *overrideMimeType)(
        IWineXMLHttpRequestPrivate *This,
        BSTR mimeType);

    HRESULT (STDMETHODCALLTYPE *put_onerror)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onerror)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_onabort)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onabort)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_onprogress)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onprogress)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_onloadstart)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onloadstart)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_onloadend)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onloadend)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    HRESULT (STDMETHODCALLTYPE *put_onload)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT v);

    HRESULT (STDMETHODCALLTYPE *get_onload)(
        IWineXMLHttpRequestPrivate *This,
        VARIANT *p);

    END_INTERFACE
} IWineXMLHttpRequestPrivateVtbl;

interface IWineXMLHttpRequestPrivate {
    CONST_VTBL IWineXMLHttpRequestPrivateVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineXMLHttpRequestPrivate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineXMLHttpRequestPrivate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineXMLHttpRequestPrivate_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWineXMLHttpRequestPrivate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWineXMLHttpRequestPrivate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWineXMLHttpRequestPrivate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWineXMLHttpRequestPrivate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWineXMLHttpRequestPrivate methods ***/
#define IWineXMLHttpRequestPrivate_get_response(This,p) (This)->lpVtbl->get_response(This,p)
#define IWineXMLHttpRequestPrivate_put_responseType(This,v) (This)->lpVtbl->put_responseType(This,v)
#define IWineXMLHttpRequestPrivate_get_responseType(This,p) (This)->lpVtbl->get_responseType(This,p)
#define IWineXMLHttpRequestPrivate_get_upload(This,p) (This)->lpVtbl->get_upload(This,p)
#define IWineXMLHttpRequestPrivate_put_withCredentials(This,v) (This)->lpVtbl->put_withCredentials(This,v)
#define IWineXMLHttpRequestPrivate_get_withCredentials(This,p) (This)->lpVtbl->get_withCredentials(This,p)
#define IWineXMLHttpRequestPrivate_overrideMimeType(This,mimeType) (This)->lpVtbl->overrideMimeType(This,mimeType)
#define IWineXMLHttpRequestPrivate_put_onerror(This,v) (This)->lpVtbl->put_onerror(This,v)
#define IWineXMLHttpRequestPrivate_get_onerror(This,p) (This)->lpVtbl->get_onerror(This,p)
#define IWineXMLHttpRequestPrivate_put_onabort(This,v) (This)->lpVtbl->put_onabort(This,v)
#define IWineXMLHttpRequestPrivate_get_onabort(This,p) (This)->lpVtbl->get_onabort(This,p)
#define IWineXMLHttpRequestPrivate_put_onprogress(This,v) (This)->lpVtbl->put_onprogress(This,v)
#define IWineXMLHttpRequestPrivate_get_onprogress(This,p) (This)->lpVtbl->get_onprogress(This,p)
#define IWineXMLHttpRequestPrivate_put_onloadstart(This,v) (This)->lpVtbl->put_onloadstart(This,v)
#define IWineXMLHttpRequestPrivate_get_onloadstart(This,p) (This)->lpVtbl->get_onloadstart(This,p)
#define IWineXMLHttpRequestPrivate_put_onloadend(This,v) (This)->lpVtbl->put_onloadend(This,v)
#define IWineXMLHttpRequestPrivate_get_onloadend(This,p) (This)->lpVtbl->get_onloadend(This,p)
#define IWineXMLHttpRequestPrivate_put_onload(This,v) (This)->lpVtbl->put_onload(This,v)
#define IWineXMLHttpRequestPrivate_get_onload(This,p) (This)->lpVtbl->get_onload(This,p)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_QueryInterface(IWineXMLHttpRequestPrivate* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWineXMLHttpRequestPrivate_AddRef(IWineXMLHttpRequestPrivate* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWineXMLHttpRequestPrivate_Release(IWineXMLHttpRequestPrivate* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_GetTypeInfoCount(IWineXMLHttpRequestPrivate* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_GetTypeInfo(IWineXMLHttpRequestPrivate* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_GetIDsOfNames(IWineXMLHttpRequestPrivate* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_Invoke(IWineXMLHttpRequestPrivate* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWineXMLHttpRequestPrivate methods ***/
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_response(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_response(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_responseType(IWineXMLHttpRequestPrivate* This,BSTR v) {
    return This->lpVtbl->put_responseType(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_responseType(IWineXMLHttpRequestPrivate* This,BSTR *p) {
    return This->lpVtbl->get_responseType(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_upload(IWineXMLHttpRequestPrivate* This,IDispatch **p) {
    return This->lpVtbl->get_upload(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_withCredentials(IWineXMLHttpRequestPrivate* This,VARIANT_BOOL v) {
    return This->lpVtbl->put_withCredentials(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_withCredentials(IWineXMLHttpRequestPrivate* This,VARIANT_BOOL *p) {
    return This->lpVtbl->get_withCredentials(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_overrideMimeType(IWineXMLHttpRequestPrivate* This,BSTR mimeType) {
    return This->lpVtbl->overrideMimeType(This,mimeType);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onerror(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onerror(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onerror(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onerror(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onabort(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onabort(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onabort(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onabort(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onprogress(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onprogress(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onprogress(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onprogress(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onloadstart(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onloadstart(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onloadstart(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onloadstart(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onloadend(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onloadend(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onloadend(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onloadend(This,p);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_put_onload(IWineXMLHttpRequestPrivate* This,VARIANT v) {
    return This->lpVtbl->put_onload(This,v);
}
static __WIDL_INLINE HRESULT IWineXMLHttpRequestPrivate_get_onload(IWineXMLHttpRequestPrivate* This,VARIANT *p) {
    return This->lpVtbl->get_onload(This,p);
}
#endif
#endif

#endif


#endif  /* __IWineXMLHttpRequestPrivate_INTERFACE_DEFINED__ */

#endif /* __MSHTML_private_LIBRARY_DEFINED__ */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);
ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __mshtml_private_iface_h__ */
