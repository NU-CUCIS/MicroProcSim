/*** Autogenerated by WIDL 8.0-rc1 from ../wine-source/dlls/msi/winemsi.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __winemsi_h__
#define __winemsi_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

/* Headers for imported files */

#include <objidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#if 0
typedef ULONG MSIHANDLE;
typedef int INSTALLMESSAGE;
typedef int MSICONDITION;
typedef int MSIRUNMODE;
typedef int INSTALLSTATE;
typedef int MSICOLINFO;
typedef int MSIMODIFY;
typedef int MSICOSTTREE;
typedef int MSIDBERROR;
#endif
#include "msiquery.h"
struct wire_field {
    unsigned int type;
    union {
        int iVal;
        LPWSTR szwVal;
        IStream *stream;
    } u;
    int len;
};
struct wire_record {
    unsigned int count;
    UINT64 cookie;
    struct wire_field fields[1];
};
/*****************************************************************************
 * IWineMsiRemote interface (v0.0)
 */
#ifndef __IWineMsiRemote_INTERFACE_DEFINED__
#define __IWineMsiRemote_INTERFACE_DEFINED__

extern handle_t rpc_handle;
extern RPC_IF_HANDLE IWineMsiRemote_v0_0_c_ifspec;
extern RPC_IF_HANDLE s_IWineMsiRemote_v0_0_s_ifspec;
/* client prototype */
UINT __cdecl remote_ViewClose(
    MSIHANDLE view);

/* server prototype */
UINT __cdecl s_remote_ViewClose(
    MSIHANDLE view);

/* client prototype */
UINT __cdecl remote_ViewExecute(
    MSIHANDLE view,
    struct wire_record *record);

/* server prototype */
UINT __cdecl s_remote_ViewExecute(
    MSIHANDLE view,
    struct wire_record *record);

/* client prototype */
UINT __cdecl remote_ViewFetch(
    MSIHANDLE view,
    struct wire_record **record);

/* server prototype */
UINT __cdecl s_remote_ViewFetch(
    MSIHANDLE view,
    struct wire_record **record);

/* client prototype */
UINT __cdecl remote_ViewGetColumnInfo(
    MSIHANDLE view,
    MSICOLINFO info,
    struct wire_record **record);

/* server prototype */
UINT __cdecl s_remote_ViewGetColumnInfo(
    MSIHANDLE view,
    MSICOLINFO info,
    struct wire_record **record);

/* client prototype */
MSIDBERROR __cdecl remote_ViewGetError(
    MSIHANDLE view,
    LPWSTR *column);

/* server prototype */
MSIDBERROR __cdecl s_remote_ViewGetError(
    MSIHANDLE view,
    LPWSTR *column);

/* client prototype */
UINT __cdecl remote_ViewModify(
    MSIHANDLE view,
    MSIMODIFY mode,
    struct wire_record *record,
    struct wire_record **refreshed);

/* server prototype */
UINT __cdecl s_remote_ViewModify(
    MSIHANDLE view,
    MSIMODIFY mode,
    struct wire_record *record,
    struct wire_record **refreshed);

/* client prototype */
MSICONDITION __cdecl remote_DatabaseIsTablePersistent(
    MSIHANDLE db,
    LPCWSTR table);

/* server prototype */
MSICONDITION __cdecl s_remote_DatabaseIsTablePersistent(
    MSIHANDLE db,
    LPCWSTR table);

/* client prototype */
UINT __cdecl remote_DatabaseGetPrimaryKeys(
    MSIHANDLE db,
    LPCWSTR table,
    struct wire_record **keys);

/* server prototype */
UINT __cdecl s_remote_DatabaseGetPrimaryKeys(
    MSIHANDLE db,
    LPCWSTR table,
    struct wire_record **keys);

/* client prototype */
UINT __cdecl remote_DatabaseGetSummaryInformation(
    MSIHANDLE db,
    UINT updatecount,
    MSIHANDLE *suminfo);

/* server prototype */
UINT __cdecl s_remote_DatabaseGetSummaryInformation(
    MSIHANDLE db,
    UINT updatecount,
    MSIHANDLE *suminfo);

/* client prototype */
UINT __cdecl remote_DatabaseOpenView(
    MSIHANDLE db,
    LPCWSTR query,
    MSIHANDLE *view);

/* server prototype */
UINT __cdecl s_remote_DatabaseOpenView(
    MSIHANDLE db,
    LPCWSTR query,
    MSIHANDLE *view);

/* client prototype */
UINT __cdecl remote_SummaryInfoGetPropertyCount(
    MSIHANDLE suminfo,
    UINT *count);

/* server prototype */
UINT __cdecl s_remote_SummaryInfoGetPropertyCount(
    MSIHANDLE suminfo,
    UINT *count);

/* client prototype */
UINT __cdecl remote_SummaryInfoGetProperty(
    MSIHANDLE suminfo,
    UINT property,
    UINT *type,
    INT *value,
    FILETIME *ft,
    LPWSTR *buf);

/* server prototype */
UINT __cdecl s_remote_SummaryInfoGetProperty(
    MSIHANDLE suminfo,
    UINT property,
    UINT *type,
    INT *value,
    FILETIME *ft,
    LPWSTR *buf);

/* client prototype */
MSIHANDLE __cdecl remote_GetActiveDatabase(
    MSIHANDLE hinst);

/* server prototype */
MSIHANDLE __cdecl s_remote_GetActiveDatabase(
    MSIHANDLE hinst);

/* client prototype */
UINT __cdecl remote_GetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPWSTR *value,
    DWORD *size);

/* server prototype */
UINT __cdecl s_remote_GetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPWSTR *value,
    DWORD *size);

/* client prototype */
UINT __cdecl remote_SetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPCWSTR value);

/* server prototype */
UINT __cdecl s_remote_SetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPCWSTR value);

/* client prototype */
int __cdecl remote_ProcessMessage(
    MSIHANDLE hinst,
    INSTALLMESSAGE message,
    struct wire_record *record);

/* server prototype */
int __cdecl s_remote_ProcessMessage(
    MSIHANDLE hinst,
    INSTALLMESSAGE message,
    struct wire_record *record);

/* client prototype */
UINT __cdecl remote_DoAction(
    MSIHANDLE hinst,
    LPCWSTR action);

/* server prototype */
UINT __cdecl s_remote_DoAction(
    MSIHANDLE hinst,
    LPCWSTR action);

/* client prototype */
UINT __cdecl remote_Sequence(
    MSIHANDLE hinst,
    LPCWSTR table,
    int sequence);

/* server prototype */
UINT __cdecl s_remote_Sequence(
    MSIHANDLE hinst,
    LPCWSTR table,
    int sequence);

/* client prototype */
UINT __cdecl remote_GetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value);

/* server prototype */
UINT __cdecl s_remote_GetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value);

/* client prototype */
UINT __cdecl remote_SetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPCWSTR value);

/* server prototype */
UINT __cdecl s_remote_SetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPCWSTR value);

/* client prototype */
UINT __cdecl remote_GetSourcePath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value);

/* server prototype */
UINT __cdecl s_remote_GetSourcePath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value);

/* client prototype */
BOOL __cdecl remote_GetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode);

/* server prototype */
BOOL __cdecl s_remote_GetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode);

/* client prototype */
UINT __cdecl remote_SetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode,
    BOOL state);

/* server prototype */
UINT __cdecl s_remote_SetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode,
    BOOL state);

/* client prototype */
UINT __cdecl remote_GetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);

/* server prototype */
UINT __cdecl s_remote_GetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);

/* client prototype */
UINT __cdecl remote_SetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE state);

/* server prototype */
UINT __cdecl s_remote_SetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE state);

/* client prototype */
UINT __cdecl remote_GetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);

/* server prototype */
UINT __cdecl s_remote_GetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);

/* client prototype */
UINT __cdecl remote_SetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE state);

/* server prototype */
UINT __cdecl s_remote_SetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE state);

/* client prototype */
LANGID __cdecl remote_GetLanguage(
    MSIHANDLE hinst);

/* server prototype */
LANGID __cdecl s_remote_GetLanguage(
    MSIHANDLE hinst);

/* client prototype */
UINT __cdecl remote_SetInstallLevel(
    MSIHANDLE hinst,
    int level);

/* server prototype */
UINT __cdecl s_remote_SetInstallLevel(
    MSIHANDLE hinst,
    int level);

/* client prototype */
UINT __cdecl remote_FormatRecord(
    MSIHANDLE hinst,
    struct wire_record *record,
    LPWSTR *value);

/* server prototype */
UINT __cdecl s_remote_FormatRecord(
    MSIHANDLE hinst,
    struct wire_record *record,
    LPWSTR *value);

/* client prototype */
MSICONDITION __cdecl remote_EvaluateCondition(
    MSIHANDLE hinst,
    LPCWSTR condition);

/* server prototype */
MSICONDITION __cdecl s_remote_EvaluateCondition(
    MSIHANDLE hinst,
    LPCWSTR condition);

/* client prototype */
UINT __cdecl remote_GetFeatureCost(
    MSIHANDLE hinst,
    LPCWSTR feature,
    MSICOSTTREE cost_tree,
    INSTALLSTATE state,
    INT *cost);

/* server prototype */
UINT __cdecl s_remote_GetFeatureCost(
    MSIHANDLE hinst,
    LPCWSTR feature,
    MSICOSTTREE cost_tree,
    INSTALLSTATE state,
    INT *cost);

/* client prototype */
UINT __cdecl remote_EnumComponentCosts(
    MSIHANDLE hinst,
    LPCWSTR component,
    DWORD index,
    INSTALLSTATE state,
    LPWSTR drive,
    INT *cost,
    INT *temp);

/* server prototype */
UINT __cdecl s_remote_EnumComponentCosts(
    MSIHANDLE hinst,
    LPCWSTR component,
    DWORD index,
    INSTALLSTATE state,
    LPWSTR drive,
    INT *cost,
    INT *temp);

/* client prototype */
UINT __cdecl remote_GetActionInfo(
    const GUID *guid,
    WCHAR **action,
    int *type,
    WCHAR **dllname,
    char **function,
    MSIHANDLE *hinst);

/* server prototype */
UINT __cdecl s_remote_GetActionInfo(
    const GUID *guid,
    WCHAR **action,
    int *type,
    WCHAR **dllname,
    char **function,
    MSIHANDLE *hinst);

/* client prototype */
UINT __cdecl remote_CloseHandle(
    MSIHANDLE handle);

/* server prototype */
UINT __cdecl s_remote_CloseHandle(
    MSIHANDLE handle);


#endif  /* __IWineMsiRemote_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __winemsi_h__ */
